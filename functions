class Network{
public:
    void setIp(uint8_t a, uint8_t b, uint8_t c, uint8_t d);
    void setIp(uint8_t d);
    void setMac(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f);
    void setMac(uint8_t f);
    void setGate(uint8_t a, uint8_t b, uint8_t c, uint8_t d);
    void setSNM(uint8_t a, uint8_t b, uint8_t c, uint8_t d);
    Network();
    uint8_t ip[4];
    uint8_t mac[6];
    uint8_t gate[4];
    uint8_t SNM[4];
};

class wiznet{
    public:
    uint8_t read(uint8_t regGroup, uint8_t reg); /// return -1 on error
    uint8_t write(uint8_t regGroup, uint8_t reg, uint8_t data); /// return -1 on error
    void writeTx(uint8_t source[], uint8_t sNr, uint16_t startAdress, uint16_t length);
    void readRx(uint8_t dest[], uint8_t sNr, uint16_t startAdress, uint16_t length);
    uint8_t setIpData();
};

class Server{
    uint8_t buffer[bufferSize];
    Server(uint8_t number);
    void setPort();
    void setPort(uint8_t laag);
    void setPort(uint8_t hoog, uint8_t laag);
    void setPort(uint16_t getal);

    int start();            // initalizatie
    int listen();                    // luisteren voor binnen koment verkeer
    int checkEstablished();          // is er een verbinding tot stand gekomen?
    uint16_t receivedData();         // data ontvangen?
    void receivingData();            // er komt data binnen, nu verwerken
    int sendData(uint8_t data[], uint16_t length);                           // verstuur data
    void gotFin();                   // fin: einde verbinding ontvangen?
    void closed();                   // verbinding is verbroken (denk ik)
    int timeout();                  // Timeout in de verbinding
    void close();                    // sluit de verbinding
    uint8_t getStatus();
    void disconnect();                     // sluit de vebinding netjes af
}

class SPI{
public:
    void init();
    uint8_t trans(uint8_t cData);
private:
}