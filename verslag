
The Spi driver is the most crucial driver in this system. The arduino communicaties with the wiznet and the digital potentiometer trough spi.
The spi driver is a class that contains two functions, init() and trans(cData). 
The init command is used for initializing the spi settings on the avr, and the data direction register for the spi pins.
the trans command transfers one byte to the slave and returns the data from the slave.


The wiznet driver is a class that containts a couple functions and all the register addresses of the w5100 chip.
The functions read a write are used to read or write one register in the w5100 chip at the given address.
the functions readRx and writeTx are used to read an write data into the buffer of the socket, this is where the data get stored which we send or receive over the TCP connection.
The function setIpdata is used write the ip, mac, gateway and subnetmask (which are defined in the Network class) to the w5100 chip.


The serverclass manages the socket. the server class contains two groups of functions, one group to chance the destination addresses and one to manage the tcp states.
with the functions set port and set destination we can set the port on wich we will listen to in case of server mode and will write to in client mode. With the setDestination function we can set the ip addres of the server we are trying to reach.

    start:               Initialize connection
    listen:              Start listning on a the specified port
    receivingData:       reads the RX buffer on the wiznet
    sendData:            send data to the TX buffer
    checkEstablished:    checks if the connection is established
    receivedData:        checks how many byte of data we received and returns that value
    gotFin:              checks if we received a fin (finshed) bit
    closed:              checks if the connections is closed from the other side and if it is, it will call the disconnect function
    timeout:             checks if the connection timedout
    close:               close the connection (dirty)
    disconnect:          close the connection (clean)
    getStatus:           reads the status register of the socket


The following function havent been implanted yet, but this is our concept.


digialPotentiometer driver

    The digitalPotention meters will be daisy chained to gether. The used digitalpotentio meter is a very simpel to control.
    simply writing a byte to it and lifting the chipselect pin will chance position of the potetniometer.

    Since we daisy chain them to gether, i need to do the following procedure
    reset chip select, send 4 x a byte, set chip select.

    Since we are dealing with a audio amplifier, we want to fade the potentio meters. So there will be a function that can adjust the potentio meters smoootly.


rotary encoder
    the rotary encoder is an optional feature, if we have enought time, we will implent it.

    The rotary encode will display the volume using a line of leds.
    if the rotary encoder rotates, it will send a message to the webserver to adjust the volume.

The main program will do the following thing:

    setup a socket in server mode for receiving commands from the webserver

    setup a socket in client mode so we can contact the webserver on our own.

loop:
    if there is a chance on the rotary encoder then we send the new volume to the webserver

    if there is a update from the server, update the variables.

    if one of the variables chanced, update the digtalpotentiometers

    goto loop